start BOF procedures EOF
BOF BOF
procedures procedure procedures
procedure INT ID LPAREN params RPAREN LBRACE dcls statements RETURN expr SEMI RBRACE
INT int
ID partition
LPAREN (
params paramlist
paramlist dcl COMMA paramlist
dcl type ID
type INT STAR
INT int
STAR *
ID array : int*
COMMA ,
paramlist dcl COMMA paramlist
dcl type ID
type INT
INT int
ID left : int
COMMA ,
paramlist dcl
dcl type ID
type INT
INT int
ID right : int
RPAREN )
LBRACE {
dcls dcls dcl BECOMES NUM SEMI
dcls dcls dcl BECOMES NUM SEMI
dcls dcls dcl BECOMES NUM SEMI
dcls dcls dcl BECOMES NUM SEMI
dcls dcls dcl BECOMES NUM SEMI
dcls dcls dcl BECOMES NUM SEMI
dcls .EMPTY
dcl type ID
type INT
INT int
ID pivot : int
BECOMES =
NUM 0 : int
SEMI ;
dcl type ID
type INT
INT int
ID i : int
BECOMES =
NUM 0 : int
SEMI ;
dcl type ID
type INT
INT int
ID j : int
BECOMES =
NUM 0 : int
SEMI ;
dcl type ID
type INT
INT int
ID temp : int
BECOMES =
NUM 0 : int
SEMI ;
dcl type ID
type INT
INT int
ID break : int
BECOMES =
NUM 0 : int
SEMI ;
dcl type ID
type INT
INT int
ID ret : int
BECOMES =
NUM 0 : int
SEMI ;
statements statements statement
statements statements statement
statements statements statement
statements statements statement
statements .EMPTY
statement lvalue BECOMES expr SEMI
lvalue ID : int
ID pivot : int
BECOMES =
expr term : int
term factor : int
factor STAR factor : int
STAR *
factor LPAREN expr RPAREN : int*
LPAREN (
expr expr PLUS term : int*
expr term : int*
term factor : int*
factor ID : int*
ID array : int*
PLUS +
term factor : int
factor ID : int
ID left : int
RPAREN )
SEMI ;
statement lvalue BECOMES expr SEMI
lvalue ID : int
ID i : int
BECOMES =
expr expr MINUS term : int
expr term : int
term factor : int
factor ID : int
ID left : int
MINUS -
term factor : int
factor NUM : int
NUM 1 : int
SEMI ;
statement lvalue BECOMES expr SEMI
lvalue ID : int
ID j : int
BECOMES =
expr expr PLUS term : int
expr term : int
term factor : int
factor ID : int
ID right : int
PLUS +
term factor : int
factor NUM : int
NUM 1 : int
SEMI ;
statement WHILE LPAREN test RPAREN LBRACE statements RBRACE
WHILE while
LPAREN (
test expr EQ expr
expr term : int
term factor : int
factor ID : int
ID break : int
EQ ==
expr term : int
term factor : int
factor NUM : int
NUM 0 : int
RPAREN )
LBRACE {
statements statements statement
statements statements statement
statements statements statement
statements statements statement
statements statements statement
statements statements statement
statements .EMPTY
statement lvalue BECOMES expr SEMI
lvalue ID : int
ID i : int
BECOMES =
expr expr PLUS term : int
expr term : int
term factor : int
factor ID : int
ID i : int
PLUS +
term factor : int
factor NUM : int
NUM 1 : int
SEMI ;
statement WHILE LPAREN test RPAREN LBRACE statements RBRACE
WHILE while
LPAREN (
test expr LT expr
expr term : int
term factor : int
factor STAR factor : int
STAR *
factor LPAREN expr RPAREN : int*
LPAREN (
expr expr PLUS term : int*
expr term : int*
term factor : int*
factor ID : int*
ID array : int*
PLUS +
term factor : int
factor ID : int
ID i : int
RPAREN )
LT <
expr term : int
term factor : int
factor ID : int
ID pivot : int
RPAREN )
LBRACE {
statements statements statement
statements .EMPTY
statement lvalue BECOMES expr SEMI
lvalue ID : int
ID i : int
BECOMES =
expr expr PLUS term : int
expr term : int
term factor : int
factor ID : int
ID i : int
PLUS +
term factor : int
factor NUM : int
NUM 1 : int
SEMI ;
RBRACE }
statement lvalue BECOMES expr SEMI
lvalue ID : int
ID j : int
BECOMES =
expr expr MINUS term : int
expr term : int
term factor : int
factor ID : int
ID j : int
MINUS -
term factor : int
factor NUM : int
NUM 1 : int
SEMI ;
statement WHILE LPAREN test RPAREN LBRACE statements RBRACE
WHILE while
LPAREN (
test expr GT expr
expr term : int
term factor : int
factor STAR factor : int
STAR *
factor LPAREN expr RPAREN : int*
LPAREN (
expr expr PLUS term : int*
expr term : int*
term factor : int*
factor ID : int*
ID array : int*
PLUS +
term factor : int
factor ID : int
ID j : int
RPAREN )
GT >
expr term : int
term factor : int
factor ID : int
ID pivot : int
RPAREN )
LBRACE {
statements statements statement
statements .EMPTY
statement lvalue BECOMES expr SEMI
lvalue ID : int
ID j : int
BECOMES =
expr expr MINUS term : int
expr term : int
term factor : int
factor ID : int
ID j : int
MINUS -
term factor : int
factor NUM : int
NUM 1 : int
SEMI ;
RBRACE }
statement IF LPAREN test RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE
IF if
LPAREN (
test expr GE expr
expr term : int
term factor : int
factor ID : int
ID i : int
GE >=
expr term : int
term factor : int
factor ID : int
ID j : int
RPAREN )
LBRACE {
statements statements statement
statements statements statement
statements .EMPTY
statement lvalue BECOMES expr SEMI
lvalue ID : int
ID ret : int
BECOMES =
expr term : int
term factor : int
factor ID : int
ID j : int
SEMI ;
statement lvalue BECOMES expr SEMI
lvalue ID : int
ID break : int
BECOMES =
expr term : int
term factor : int
factor NUM : int
NUM 241 : int
SEMI ;
RBRACE }
ELSE else
LBRACE {
statements .EMPTY
RBRACE }
statement IF LPAREN test RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE
IF if
LPAREN (
test expr NE expr
expr term : int
term factor : int
factor ID : int
ID break : int
NE !=
expr term : int
term factor : int
factor NUM : int
NUM 241 : int
RPAREN )
LBRACE {
statements statements statement
statements statements statement
statements statements statement
statements .EMPTY
statement lvalue BECOMES expr SEMI
lvalue ID : int
ID temp : int
BECOMES =
expr term : int
term factor : int
factor STAR factor : int
STAR *
factor LPAREN expr RPAREN : int*
LPAREN (
expr expr PLUS term : int*
expr term : int*
term factor : int*
factor ID : int*
ID array : int*
PLUS +
term factor : int
factor ID : int
ID i : int
RPAREN )
SEMI ;
statement lvalue BECOMES expr SEMI
lvalue STAR factor : int
STAR *
factor LPAREN expr RPAREN : int*
LPAREN (
expr expr PLUS term : int*
expr term : int*
term factor : int*
factor ID : int*
ID array : int*
PLUS +
term factor : int
factor ID : int
ID i : int
RPAREN )
BECOMES =
expr term : int
term factor : int
factor STAR factor : int
STAR *
factor LPAREN expr RPAREN : int*
LPAREN (
expr expr PLUS term : int*
expr term : int*
term factor : int*
factor ID : int*
ID array : int*
PLUS +
term factor : int
factor ID : int
ID j : int
RPAREN )
SEMI ;
statement lvalue BECOMES expr SEMI
lvalue STAR factor : int
STAR *
factor LPAREN expr RPAREN : int*
LPAREN (
expr expr PLUS term : int*
expr term : int*
term factor : int*
factor ID : int*
ID array : int*
PLUS +
term factor : int
factor ID : int
ID j : int
RPAREN )
BECOMES =
expr term : int
term factor : int
factor ID : int
ID temp : int
SEMI ;
RBRACE }
ELSE else
LBRACE {
statements .EMPTY
RBRACE }
RBRACE }
RETURN return
expr term : int
term factor : int
factor ID : int
ID ret : int
SEMI ;
RBRACE }
procedures procedure procedures
procedure INT ID LPAREN params RPAREN LBRACE dcls statements RETURN expr SEMI RBRACE
INT int
ID fastSort
LPAREN (
params paramlist
paramlist dcl COMMA paramlist
dcl type ID
type INT STAR
INT int
STAR *
ID array : int*
COMMA ,
paramlist dcl COMMA paramlist
dcl type ID
type INT
INT int
ID left : int
COMMA ,
paramlist dcl
dcl type ID
type INT
INT int
ID right : int
RPAREN )
LBRACE {
dcls dcls dcl BECOMES NUM SEMI
dcls dcls dcl BECOMES NUM SEMI
dcls .EMPTY
dcl type ID
type INT
INT int
ID skip : int
BECOMES =
NUM 0 : int
SEMI ;
dcl type ID
type INT
INT int
ID pivot : int
BECOMES =
NUM 0 : int
SEMI ;
statements statements statement
statements statements statement
statements statements statement
statements statements statement
statements .EMPTY
statement IF LPAREN test RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE
IF if
LPAREN (
test expr LT expr
expr term : int
term factor : int
factor ID : int
ID left : int
LT <
expr term : int
term factor : int
factor NUM : int
NUM 0 : int
RPAREN )
LBRACE {
statements statements statement
statements .EMPTY
statement lvalue BECOMES expr SEMI
lvalue ID : int
ID skip : int
BECOMES =
expr term : int
term factor : int
factor NUM : int
NUM 1 : int
SEMI ;
RBRACE }
ELSE else
LBRACE {
statements .EMPTY
RBRACE }
statement IF LPAREN test RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE
IF if
LPAREN (
test expr LT expr
expr term : int
term factor : int
factor ID : int
ID right : int
LT <
expr term : int
term factor : int
factor NUM : int
NUM 0 : int
RPAREN )
LBRACE {
statements statements statement
statements .EMPTY
statement lvalue BECOMES expr SEMI
lvalue ID : int
ID skip : int
BECOMES =
expr term : int
term factor : int
factor NUM : int
NUM 1 : int
SEMI ;
RBRACE }
ELSE else
LBRACE {
statements .EMPTY
RBRACE }
statement IF LPAREN test RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE
IF if
LPAREN (
test expr LE expr
expr term : int
term factor : int
factor ID : int
ID right : int
LE <=
expr term : int
term factor : int
factor ID : int
ID left : int
RPAREN )
LBRACE {
statements statements statement
statements .EMPTY
statement lvalue BECOMES expr SEMI
lvalue ID : int
ID skip : int
BECOMES =
expr term : int
term factor : int
factor NUM : int
NUM 1 : int
SEMI ;
RBRACE }
ELSE else
LBRACE {
statements .EMPTY
RBRACE }
statement IF LPAREN test RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE
IF if
LPAREN (
test expr EQ expr
expr term : int
term factor : int
factor ID : int
ID skip : int
EQ ==
expr term : int
term factor : int
factor NUM : int
NUM 0 : int
RPAREN )
LBRACE {
statements statements statement
statements statements statement
statements statements statement
statements .EMPTY
statement lvalue BECOMES expr SEMI
lvalue ID : int
ID pivot : int
BECOMES =
expr term : int
term factor : int
factor ID LPAREN arglist RPAREN : int
ID partition
LPAREN (
arglist expr COMMA arglist
expr term : int*
term factor : int*
factor ID : int*
ID array : int*
COMMA ,
arglist expr COMMA arglist
expr term : int
term factor : int
factor ID : int
ID left : int
COMMA ,
arglist expr
expr term : int
term factor : int
factor ID : int
ID right : int
RPAREN )
SEMI ;
statement lvalue BECOMES expr SEMI
lvalue ID : int
ID skip : int
BECOMES =
expr term : int
term factor : int
factor ID LPAREN arglist RPAREN : int
ID fastSort
LPAREN (
arglist expr COMMA arglist
expr term : int*
term factor : int*
factor ID : int*
ID array : int*
COMMA ,
arglist expr COMMA arglist
expr term : int
term factor : int
factor ID : int
ID left : int
COMMA ,
arglist expr
expr term : int
term factor : int
factor ID : int
ID pivot : int
RPAREN )
SEMI ;
statement lvalue BECOMES expr SEMI
lvalue ID : int
ID skip : int
BECOMES =
expr term : int
term factor : int
factor ID LPAREN arglist RPAREN : int
ID fastSort
LPAREN (
arglist expr COMMA arglist
expr term : int*
term factor : int*
factor ID : int*
ID array : int*
COMMA ,
arglist expr COMMA arglist
expr expr PLUS term : int
expr term : int
term factor : int
factor ID : int
ID pivot : int
PLUS +
term factor : int
factor NUM : int
NUM 1 : int
COMMA ,
arglist expr
expr term : int
term factor : int
factor ID : int
ID right : int
RPAREN )
SEMI ;
RBRACE }
ELSE else
LBRACE {
statements .EMPTY
RBRACE }
RETURN return
expr term : int
term factor : int
factor NUM : int
NUM 0 : int
SEMI ;
RBRACE }
procedures main
main INT WAIN LPAREN dcl COMMA dcl RPAREN LBRACE dcls statements RETURN expr SEMI RBRACE
INT int
WAIN wain
LPAREN (
dcl type ID
type INT STAR
INT int
STAR *
ID a : int*
COMMA ,
dcl type ID
type INT
INT int
ID b : int
RPAREN )
LBRACE {
dcls dcls dcl BECOMES NUM SEMI
dcls dcls dcl BECOMES NUM SEMI
dcls .EMPTY
dcl type ID
type INT
INT int
ID sort : int
BECOMES =
NUM 0 : int
SEMI ;
dcl type ID
type INT
INT int
ID i : int
BECOMES =
NUM 0 : int
SEMI ;
statements statements statement
statements statements statement
statements statements statement
statements statements statement
statements .EMPTY
statement WHILE LPAREN test RPAREN LBRACE statements RBRACE
WHILE while
LPAREN (
test expr LT expr
expr term : int
term factor : int
factor ID : int
ID i : int
LT <
expr term : int
term factor : int
factor ID : int
ID b : int
RPAREN )
LBRACE {
statements statements statement
statements statements statement
statements .EMPTY
statement PRINTLN LPAREN expr RPAREN SEMI
PRINTLN println
LPAREN (
expr term : int
term factor : int
factor STAR factor : int
STAR *
factor LPAREN expr RPAREN : int*
LPAREN (
expr expr PLUS term : int*
expr term : int*
term factor : int*
factor ID : int*
ID a : int*
PLUS +
term factor : int
factor ID : int
ID i : int
RPAREN )
RPAREN )
SEMI ;
statement lvalue BECOMES expr SEMI
lvalue ID : int
ID i : int
BECOMES =
expr expr PLUS term : int
expr term : int
term factor : int
factor ID : int
ID i : int
PLUS +
term factor : int
factor NUM : int
NUM 1 : int
SEMI ;
RBRACE }
statement lvalue BECOMES expr SEMI
lvalue ID : int
ID sort : int
BECOMES =
expr term : int
term factor : int
factor ID LPAREN arglist RPAREN : int
ID fastSort
LPAREN (
arglist expr COMMA arglist
expr term : int*
term factor : int*
factor ID : int*
ID a : int*
COMMA ,
arglist expr COMMA arglist
expr term : int
term factor : int
factor NUM : int
NUM 0 : int
COMMA ,
arglist expr
expr expr MINUS term : int
expr term : int
term factor : int
factor ID : int
ID b : int
MINUS -
term factor : int
factor NUM : int
NUM 1 : int
RPAREN )
SEMI ;
statement lvalue BECOMES expr SEMI
lvalue ID : int
ID i : int
BECOMES =
expr term : int
term factor : int
factor NUM : int
NUM 0 : int
SEMI ;
statement WHILE LPAREN test RPAREN LBRACE statements RBRACE
WHILE while
LPAREN (
test expr LT expr
expr term : int
term factor : int
factor ID : int
ID i : int
LT <
expr term : int
term factor : int
factor ID : int
ID b : int
RPAREN )
LBRACE {
statements statements statement
statements statements statement
statements .EMPTY
statement PRINTLN LPAREN expr RPAREN SEMI
PRINTLN println
LPAREN (
expr term : int
term factor : int
factor STAR factor : int
STAR *
factor LPAREN expr RPAREN : int*
LPAREN (
expr expr PLUS term : int*
expr term : int*
term factor : int*
factor ID : int*
ID a : int*
PLUS +
term factor : int
factor ID : int
ID i : int
RPAREN )
RPAREN )
SEMI ;
statement lvalue BECOMES expr SEMI
lvalue ID : int
ID i : int
BECOMES =
expr expr PLUS term : int
expr term : int
term factor : int
factor ID : int
ID i : int
PLUS +
term factor : int
factor NUM : int
NUM 1 : int
SEMI ;
RBRACE }
RETURN return
expr term : int
term factor : int
factor NUM : int
NUM 0 : int
SEMI ;
RBRACE }
EOF EOF
